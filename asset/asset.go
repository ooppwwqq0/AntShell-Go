// Code generated by go-bindata.
// sources:
// antshell.cfg
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _antshellCfg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x50\x5b\x4f\xd3\x50\x1c\x7f\x3f\x9f\xe2\x9f\xf4\xd5\x6c\x91\xc4\xc7\x3e\x74\xac\x5c\x02\xae\x4d\x5b\xa2\x86\x90\xa6\x65\xc7\xad\x52\xbb\xd9\x4b\x88\x3c\x18\xa6\x80\xc3\x80\x18\xdd\x06\x81\x89\xcc\xa0\x59\x4c\xd8\x16\x09\x62\x76\xc9\xbe\x4c\xcf\xe9\xfa\xc4\x57\x30\xdd\x64\x2c\xbc\x9d\xf3\xbb\xe7\xbf\x9c\xc6\xcf\x35\xcf\x74\x57\x50\x32\xa1\x8a\x9c\x32\x07\x2c\xbc\x89\xc7\x34\xcb\x75\xb2\xd8\x34\xe3\xce\x2b\xd3\x70\x71\xfc\xf6\x1f\x4b\xeb\x68\x81\x7f\x36\xa1\x74\x9c\x6c\xdc\x48\xab\xb6\xa3\x21\x06\x64\x6c\xe2\x55\x17\xdc\x2c\x06\x53\xb3\x32\x9e\x96\xc1\xc0\xc2\x46\x16\x72\x36\x60\x0b\x1e\xfc\x2f\x83\x8d\x2c\x5a\xe4\x52\xb3\x32\xaf\x0c\x69\xc4\x80\x8d\xd3\x90\xb1\x31\xb6\xe0\x35\x36\xcd\xdc\x3a\xe8\xa6\x87\x21\x6f\x58\x6b\xb0\x1a\x3d\x51\x82\x4b\xa5\x78\x49\x9d\x16\x16\x05\x09\xd8\x21\x8d\x18\x50\x6c\x0f\xc7\x67\x34\xd3\xc1\x40\x77\xbf\x90\xee\x26\x2d\x56\xc8\xf6\x65\x78\x78\x31\x68\xbd\x1b\x34\xcb\xb4\x5e\x23\xdd\x03\x94\xe4\x13\x4b\xb3\xc0\xc2\x50\x89\x18\x08\xfa\x9d\xb0\x76\x35\x22\xc3\xce\xd1\xa0\x71\x4e\x8a\x3b\x11\xd2\x3c\x08\x6b\x57\xd1\xa3\xdc\x42\x22\x37\xcb\x03\x0b\x0f\x1f\x21\x06\xc8\xf9\x7b\xbf\xd3\x0b\x4e\x1a\xa4\x57\x46\x09\x6e\x7a\x61\x49\x54\x93\xf3\xd2\xbd\x63\xe9\xda\xea\x9a\x97\x47\x68\xd9\x73\xb0\xbd\x82\x18\xa0\x95\x16\xf9\x7e\xea\xff\xed\xd0\x6a\x7b\xd0\x68\x91\x5e\x99\x1e\xfe\x19\x15\x06\xa5\x3a\x2d\x5e\xfb\xfd\x1a\x2d\x34\xd1\x92\xcc\x4b\x29\xee\x71\x54\xb7\xae\x59\x99\xbc\x61\x65\x90\xc8\xc9\xf2\x13\x41\x4a\x02\x0b\x48\x14\xa4\xe8\x52\x53\x53\x08\x2d\xeb\x9a\xe3\x1a\x39\x2b\x8a\x27\x67\x35\x72\xfa\x99\x56\xdb\xe1\xf6\x7e\xd0\x6b\xa0\x04\x27\x2b\xf3\x42\x4a\x9d\x13\xe4\x48\xae\x6b\x39\x13\x1b\x2f\x8c\x98\xe1\xbc\xc4\xb1\xbc\xa7\x8f\x05\x77\x79\xb7\x48\xb4\x60\xb2\x7d\x22\x9c\xec\x46\xe1\xa4\xb9\x13\x9c\x15\xee\x12\xa2\x75\x49\x55\x94\xf8\x99\xf9\xa7\xd1\xc4\x49\xc3\x50\x7a\xd3\xdd\xa3\xc7\x6f\x69\xf5\x97\xdf\xeb\x07\xa5\xfa\x3d\x27\xb0\x93\x0e\x37\xe7\xe6\xc9\x49\x9b\x34\x8e\xc7\xde\xa0\x54\xf7\xdb\x1f\x83\xd2\x37\x5a\xfc\x44\x3e\xd4\xe9\x66\x61\x84\x0f\x9a\xd7\xe4\xe7\x0f\x52\xd9\xf2\xfb\x5f\xc9\xc5\xd1\x4d\x77\x2f\x2c\xf4\xc9\xf6\x3e\xbd\xdc\x0a\xab\xbf\xc7\x2d\x8a\xa0\x88\xc0\xa2\x7f\x01\x00\x00\xff\xff\x46\xdd\xc8\xa5\xdf\x02\x00\x00")

func antshellCfgBytes() ([]byte, error) {
	return bindataRead(
		_antshellCfg,
		"antshell.cfg",
	)
}

func antshellCfg() (*asset, error) {
	bytes, err := antshellCfgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "antshell.cfg", size: 735, mode: os.FileMode(420), modTime: time.Unix(1629820196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"antshell.cfg": antshellCfg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"antshell.cfg": &bintree{antshellCfg, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
