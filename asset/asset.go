// Code generated by go-bindata.
// sources:
// antshell.cfg
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _antshellCfg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x50\x5b\x4f\xd3\x50\x1c\x7f\x3f\x9f\xe2\x9f\xec\xd5\x6c\x91\xc4\xc7\x3e\x74\xac\x5c\x02\xae\x4d\x3b\xa2\x86\x90\xa6\xdd\x8e\x5b\xe5\xd8\xcd\x5e\x42\xe4\xc1\x30\x05\x1c\x06\xc4\xe8\x06\x04\x26\x32\x83\x66\x31\x61\x5b\x24\x88\xd9\x25\xfb\x32\x3d\xa7\xeb\x13\x5f\xc1\x74\x93\xb1\xf0\x76\xce\xff\x77\xcd\x6f\x39\x83\x9f\x6b\x2e\x71\x56\x50\x22\xae\x4a\x7c\x6a\x0e\x38\x78\x13\x8b\x6a\xa6\x63\xe7\x30\x21\x31\xfb\x15\x31\x1c\x1c\xbb\xfd\x47\x33\x3a\x5a\x10\x9e\x4d\x30\x6d\x3b\x17\x33\x32\xaa\x65\x6b\x28\x02\x0a\x26\x38\xed\x80\x93\xc3\x40\x34\x33\xeb\x6a\x59\x0c\x1c\xac\xe7\x20\x6f\x01\x36\xe1\xc1\xff\x30\x58\xcf\xa1\x45\x3e\x39\xab\x08\xa9\x21\x8c\x22\x60\xe1\x0c\x64\x2d\x8c\x4d\x78\x8d\x09\xc9\xaf\x81\x4e\x5c\x0c\x05\xc3\x5c\x85\x74\xf8\x44\x71\x3e\x99\x14\x64\x75\x5a\x5c\x14\x65\xe0\x86\x30\x8a\x40\xca\x72\x71\x6c\x46\x23\x36\x06\xb6\xf3\x85\x76\x37\x58\xe9\x80\x6e\x5d\x06\x87\x17\x83\xd6\xbb\x41\xb3\xc2\xea\x35\xda\xdd\x47\x09\x21\xbe\x34\x0b\x1c\x0c\x99\x28\x02\x7e\xbf\x13\xd4\xae\x46\x60\xd0\x39\x1a\x34\xce\x69\x69\x3b\xbc\x34\xf7\x83\xda\x55\xf8\xa8\xb4\x90\xc4\xcf\x0a\xc0\xc1\xc3\x47\x28\x02\xf4\xfc\xbd\xd7\xe9\xf9\x27\x0d\xda\xab\xa0\x38\x3f\xbd\xb0\x24\xa9\x89\x79\xf9\xde\x58\xba\x96\x5e\x75\x0b\x08\x2d\xbb\x36\xb6\x56\x50\x04\xd8\x41\x8b\x7e\x3f\xf5\xfe\x76\x58\xb5\x3d\x68\xb4\x68\xaf\xc2\x0e\xff\x8c\x02\xfd\x72\x9d\x95\xae\xbd\x7e\x8d\x15\x9b\x68\x49\x11\xe4\x24\xff\x38\x8c\x4b\x6b\xb6\xed\x18\x98\x20\x89\x57\x94\x27\xa2\x9c\x00\x0e\x90\x24\xca\xe1\x52\x53\x53\x68\x34\x3c\x42\xcb\xba\x66\x3b\x46\xde\x0c\x53\xe8\x59\x8d\x9e\x7e\x66\xd5\x76\xb0\xb5\xe7\xf7\x1a\x28\xce\x2b\xa9\x79\x31\xa9\xce\x89\x4a\xa8\xd2\xb5\x3c\xc1\xc6\x0b\x23\x6a\xd8\x2f\x71\xb4\xe0\xea\x63\xc2\x9d\xed\xed\x25\x2c\x02\x1c\xac\x69\x66\xb6\x60\x98\xd9\x49\x73\xba\x13\x9a\xd3\xe6\xb6\x7f\x56\xbc\x73\x08\x4b\x26\x54\x49\x16\x66\xe6\x9f\x86\x4d\x27\x05\x43\xea\x4d\x77\x97\x1d\xbf\x65\xd5\x5f\x5e\xaf\xef\x97\xeb\xf7\x94\xc0\x4d\x2a\x9c\xbc\x53\xa0\x27\x6d\xda\x38\x1e\x6b\xfd\x72\xdd\x6b\x7f\xf4\xcb\xdf\x58\xe9\x13\xfd\x50\x67\x1b\xc5\xd1\x7d\xd0\xbc\xa6\x3f\x7f\xd0\x83\x4d\xaf\xff\x95\x5e\x1c\xdd\x74\x77\x83\x62\x9f\x6e\xed\xb1\xcb\xcd\xa0\xfa\x7b\x9c\x92\x12\x53\x12\x70\xe8\x5f\x00\x00\x00\xff\xff\xd7\x65\x27\x2c\xe6\x02\x00\x00")

func antshellCfgBytes() ([]byte, error) {
	return bindataRead(
		_antshellCfg,
		"antshell.cfg",
	)
}

func antshellCfg() (*asset, error) {
	bytes, err := antshellCfgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "antshell.cfg", size: 742, mode: os.FileMode(420), modTime: time.Unix(1629825392, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"antshell.cfg": antshellCfg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"antshell.cfg": &bintree{antshellCfg, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
