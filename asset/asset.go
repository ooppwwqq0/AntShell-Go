// Code generated by go-bindata.
// sources:
// antshell.cfg
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _antshellCfg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\xdd\x4f\xd3\x6e\x18\xbd\x7f\xff\x8a\x27\xe9\xed\xef\xb7\x06\x12\xbd\xeb\x45\xc7\xca\x47\xc0\xb5\x69\x47\xd4\x10\xb2\xb4\xdb\xeb\x56\x29\xdd\xec\x47\x88\x5c\x18\xa6\x80\x43\x41\x8c\x6e\x83\xc0\x44\x66\xc0\x4c\x13\xb6\x45\x82\x98\x7d\xb8\x7f\x66\xef\xdb\xf5\x8a\x7f\xc1\x74\xe3\x63\xe1\xee\xe9\x79\xce\x39\xcf\xe9\x79\x17\x92\xf8\x99\xea\x1a\xce\x22\x8a\x84\xe3\x12\x1f\x9b\x06\x0e\x5e\xb1\x21\xd5\x74\xec\x34\x36\x0c\xd6\x7e\x61\xe8\x0e\x66\x6f\xbe\x43\x49\x0d\xcd\x0a\x4f\x47\x98\xb6\x9d\x66\xf5\x64\xdc\xb2\x55\xc4\x80\x82\x0d\x9c\x70\xc0\x49\x63\x30\x54\x33\xe5\xaa\x29\x0c\x1c\xac\xa6\x21\x63\x01\x36\xe1\xbf\xeb\x63\xb0\x9a\x46\x73\x7c\x74\x4a\x11\x62\x83\x35\x62\xc0\xc2\x49\x48\x59\x18\x9b\xf0\x12\x1b\x46\x66\x05\x34\xc3\xc5\x90\xd5\xcd\x25\x48\x04\x23\x0a\xf3\xd1\xa8\x20\xc7\x27\xc4\x39\x51\x06\x6e\xb0\x46\x0c\xc4\x2c\x17\xb3\x93\xaa\x61\x63\xa0\x5b\x9f\x49\x7b\x8d\xe6\x4b\x64\xe3\xdc\xdf\x3b\xeb\x37\xde\xf4\xeb\x45\x5a\xad\x90\xf6\x2e\x8a\x08\xe1\xf9\x29\xe0\x60\xc0\x44\x0c\x78\xdd\x96\x5f\xb9\x18\x2e\xfd\xd6\x7e\xbf\x76\x42\xf2\x9b\x01\x52\xdf\xf5\x2b\x17\xc1\x50\x6c\x20\x89\x9f\x12\x80\x83\xb1\x07\x88\x01\x72\xf2\xb6\xd7\xea\x78\x87\x35\xd2\x29\xa2\x30\x3f\x31\x3b\x2f\xc5\x23\x33\xf2\xbd\xb2\x34\x35\xb1\xe4\x66\x11\x03\xfe\xda\x16\x7d\xff\x43\x53\x4d\x13\x5b\x74\xff\xaf\x77\xd2\xf4\xce\x4a\x5e\xf1\x14\x6e\x0a\x60\xc1\x52\xcd\x64\x66\x19\x58\x18\xfb\x7f\xec\xe1\xf5\xdf\x01\x77\x0d\x23\xb4\xe0\xda\xd8\x5a\x44\x0c\xd0\x52\x83\x7c\x3b\xea\xfd\x69\xd1\x72\xb3\x5f\x6b\x90\x4e\x91\xee\xfd\x1e\x66\xf6\x0a\x55\x9a\xbf\xec\x75\x2b\x34\x57\x47\xf3\x8a\x20\x47\xf9\x47\x41\xe2\x84\x6a\xdb\x8e\x8e\x0d\x24\xf1\x8a\xf2\x58\x94\x23\xc0\x01\x92\x44\x39\x28\x7b\x7c\x1c\x0d\xdf\x0e\xa1\x05\x4d\xb5\x1d\x3d\x63\x06\x57\xc8\x71\x85\x1c\x7d\xa2\xe5\xa6\xbf\xb1\xe3\x75\x6a\x28\xcc\x2b\xb1\x19\x31\x1a\x9f\x16\x95\x40\xa5\xa9\x19\x03\xeb\xcf\xf5\x90\x6e\x2f\xe3\x50\xd6\xd5\x6e\x09\x77\xb6\x37\x48\x10\x04\x38\x58\x51\xcd\x54\x56\x37\x53\xa3\xe6\x64\x2b\x30\x27\xf5\x4d\xef\x38\x77\xe7\x10\x84\x8c\xc4\x25\x59\x98\x9c\x79\x12\x24\x1d\x15\x0c\xa8\x57\xed\x6d\x7a\xf0\x9a\x96\x7f\xf6\x3a\x5d\xaf\x50\xbd\xa7\x04\x6e\x54\xe1\x64\x9c\x2c\x39\x6c\x92\xda\xc1\xad\xd6\x2b\x54\x7b\xcd\x0f\x5e\xe1\x2b\xcd\x7f\x24\xef\xaa\x74\x2d\x37\xc4\xfb\xf5\x4b\xf2\xfd\x94\x94\xd6\x7b\xdd\x2f\xe4\x6c\xff\xaa\xbd\xed\xe7\xba\x64\x63\x87\x9e\xaf\xfb\xe5\x5f\xb7\x57\x62\x62\x4c\x02\x0e\xfd\x0b\x00\x00\xff\xff\x9a\xc5\x15\x71\x29\x03\x00\x00")

func antshellCfgBytes() ([]byte, error) {
	return bindataRead(
		_antshellCfg,
		"antshell.cfg",
	)
}

func antshellCfg() (*asset, error) {
	bytes, err := antshellCfgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "antshell.cfg", size: 809, mode: os.FileMode(420), modTime: time.Unix(1629866730, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"antshell.cfg": antshellCfg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"antshell.cfg": &bintree{antshellCfg, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
