// Code generated by go-bindata.
// sources:
// antshell.cfg
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _antshellCfg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\x5b\x4f\xda\x60\x18\xbe\xff\x7e\xc5\x9b\x70\x3b\x21\x9a\x6c\x77\xbd\x28\x52\x0f\xd1\xd1\xa6\xe0\x0e\x31\x86\x14\xf8\x06\x9d\xb5\x65\x3d\xcc\xcc\x8b\x45\x36\x75\xb8\xe9\x5c\x36\x40\xa3\xcc\xc9\xa2\x0b\x5b\x22\x90\x19\xe7\xc2\x61\xfc\x19\xbe\xaf\xf4\xca\xbf\xb0\x14\x50\x1a\xaf\xfa\xf6\x7d\x0e\xef\xd3\xa7\x8b\x49\xfc\x4c\xb2\x14\x73\x09\x85\x82\x31\x81\x8d\xce\x00\x03\xaf\x03\x7e\x49\x35\x8d\x34\x56\x94\x80\xf1\x42\x91\x4d\x1c\xb8\x79\xf7\x27\xe3\x68\x8e\x7b\xea\x61\x1a\x46\x3a\x20\x27\x63\xba\x21\x21\x1f\x44\xb0\x82\x13\x26\x98\x69\x0c\x8a\xa4\xa6\x2c\x29\x85\x81\x81\xb5\x34\x68\x3a\x60\x15\xee\x0d\x8f\xc1\x5a\x1a\xcd\xb3\xe1\xe9\x08\x17\xed\xc3\xc8\x07\x3a\x4e\x42\x4a\xc7\x58\x85\x57\x58\x51\xb4\x55\x88\x2b\x16\x86\x8c\xac\x2e\x43\xc2\x1d\x51\x90\x0d\x87\x39\x31\x36\xc9\xcf\xf3\x22\x30\x7d\x18\xf9\x20\xaa\x5b\x38\x30\x25\x29\x06\x06\xba\xfd\x85\xb4\xd6\x69\xae\x48\x36\x2f\x9c\xfd\xf3\x5e\xfd\x6d\xaf\x56\xa0\x95\x32\x69\xed\xa1\x10\x17\x5c\x98\x06\x06\xfa\x4c\xe4\x03\xbb\xd3\x74\xca\x97\x03\xd0\x69\x1e\xf4\xaa\xa7\x24\xb7\xe5\x6e\x6a\x7b\x4e\xf9\xd2\x1d\x0a\x75\x24\xb0\xd3\x1c\x30\x30\x7e\x1f\xf9\x80\x9c\xbe\xeb\x36\xdb\xf6\x51\x95\xb4\x0b\x28\xc8\x4e\xce\x2d\x08\xb1\xd0\xac\x78\xa7\xac\xb8\x94\x58\xb6\x32\xc8\x07\xce\xfa\x36\xfd\xf0\x33\x2e\xa9\x2a\xd6\xe9\xc1\x3f\xfb\xb4\x61\x9f\x17\xed\xc2\x19\xdc\x14\x10\x00\x5d\x52\x93\xda\x0a\x04\x60\x7c\x6c\xfc\xc1\xf0\xeb\x80\x19\xae\x11\x5a\xb4\x0c\xac\x2f\x21\x1f\xd0\x62\x9d\x7c\x3f\xee\xfe\x6d\xd2\x52\xa3\x57\xad\x93\x76\x81\xee\xff\x19\x64\xb6\xf3\x15\x9a\xbb\xea\x76\xca\x34\x5b\x43\x0b\x11\x4e\x0c\xb3\x0f\xdd\xc4\x09\xc9\x30\x4c\x19\x2b\x48\x60\x23\x91\xc7\xbc\x18\x02\x06\x90\xc0\x8b\x6e\xd9\x13\x13\x68\xf0\xef\x10\x5a\x8c\x4b\x86\x29\x6b\xaa\x7b\x85\x9c\x94\xc9\xf1\x67\x5a\x6a\x38\x9b\xbb\x76\xbb\x8a\x82\x6c\x24\x3a\xcb\x87\x63\x33\x7c\xc4\x55\xc5\x25\x4d\xc1\xf2\x73\xd9\x2f\x1b\x2b\xd8\x9f\xb1\xe2\xb7\x84\x91\xed\xcd\xc6\x0d\x02\x0c\xac\x4a\x6a\x2a\x23\xab\x29\xaf\x39\xd9\x76\xcd\x49\x6d\xcb\x3e\xc9\x8e\x1c\xdc\x90\xa1\x98\x20\x72\x53\xb3\x4f\xdc\xa4\x5e\x41\x9f\x7a\xdd\xda\xa1\x87\x6f\x68\xe9\x57\xb7\xdd\xb1\xf3\x95\x3b\x4a\x60\xbc\x0a\x53\x33\x33\xe4\xa8\x41\xaa\x87\xb7\x5a\x3b\x5f\xe9\x36\x3e\xda\xf9\x6f\x34\xf7\x89\xbc\xaf\xd0\xf5\xec\x60\xdf\xab\x5d\x91\x1f\x67\xa4\xb8\xd1\xed\x7c\x25\xe7\x07\xd7\xad\x1d\x27\xdb\x21\x9b\xbb\xf4\x62\xc3\x29\xfd\xbe\xbd\x12\xe5\xa3\x82\xb7\x2e\xff\xf0\x19\x53\x64\xc3\x5c\x42\x82\xc8\x87\x3c\x0d\x8d\x65\x74\x2d\x39\xaa\x29\xc4\x3d\xf2\x82\x49\xfc\x72\x84\xfd\x0f\x00\x00\xff\xff\x4b\x6b\x76\x90\x7b\x03\x00\x00")

func antshellCfgBytes() ([]byte, error) {
	return bindataRead(
		_antshellCfg,
		"antshell.cfg",
	)
}

func antshellCfg() (*asset, error) {
	bytes, err := antshellCfgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "antshell.cfg", size: 891, mode: os.FileMode(420), modTime: time.Unix(1688620920, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"antshell.cfg": antshellCfg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"antshell.cfg": &bintree{antshellCfg, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
