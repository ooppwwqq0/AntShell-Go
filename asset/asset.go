// Code generated by go-bindata.
// sources:
// antshell.cfg
// DO NOT EDIT!

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _antshellCfg = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\xdd\x4f\xd3\x6e\x18\xbd\x7f\xff\x8a\x27\xe9\xed\xef\xb7\x06\x12\x13\x6f\x7a\xd1\xb1\xf2\x11\x70\x6d\xda\x11\x35\x84\x2c\xed\xf6\xba\x55\x4a\x37\xfb\x11\x22\x17\x86\x29\xe0\x50\x10\xa3\xdb\x20\x30\x91\x19\x30\xd3\x84\x6d\x91\x20\x66\x1f\xee\x9f\xd9\xfb\x76\xbd\xe2\x5f\x30\xdd\xf8\x58\xb8\x7b\x7a\x9e\x73\xce\x73\x7a\xde\x85\x24\x7e\xa6\xba\x86\xb3\x88\x22\xe1\xb8\xc4\xc7\xa6\x81\x83\x57\x6c\x48\x35\x1d\x3b\x8d\x0d\x83\xb5\x5f\x18\xba\x83\xd9\x9b\xef\x50\x52\x43\xb3\xc2\xd3\x11\xa6\x6d\xa7\x59\x3d\x19\xb7\x6c\x15\x31\xa0\x60\x03\x27\x1c\x70\xd2\x18\x0c\xd5\x4c\xb9\x6a\x0a\x03\x07\xab\x69\xc8\x58\x80\x4d\xf8\xef\xfa\x18\xac\xa6\xd1\x1c\x1f\x9d\x52\x84\xd8\x60\x8d\x18\xb0\x70\x12\x52\x16\xc6\x26\xbc\xc4\x86\x91\x59\x01\xcd\x70\x31\x64\x75\x73\x09\x12\xc1\x88\xc2\x7c\x34\x2a\xc8\xf1\x09\x71\x4e\x94\x81\x1b\xac\x11\x03\x31\xcb\xc5\xec\xa4\x6a\xd8\x18\xe8\xd6\x67\xd2\x5e\xa3\xf9\x12\xd9\x38\xf7\xf7\xce\xfa\x8d\x37\xfd\x7a\x91\x56\x2b\xa4\xbd\x8b\x22\x42\x78\x7e\x0a\x38\x18\x30\x11\x03\x5e\xb7\xe5\x57\x2e\x86\x4b\xbf\xb5\xdf\xaf\x9d\x90\xfc\x66\x80\xd4\x77\xfd\xca\x45\x30\x14\x1b\x48\xe2\xa7\x04\xe0\x60\xec\x01\x62\x80\x9c\xbc\xed\xb5\x3a\xde\x61\x8d\x74\x8a\x28\xcc\x4f\xcc\xce\x4b\xf1\xc8\x8c\x7c\xaf\x2c\x4d\x4d\x2c\xb9\x59\xc4\x80\xbf\xb6\x45\xdf\xff\xd0\x54\xd3\xc4\x16\xdd\xff\xeb\x9d\x34\xbd\xb3\x92\x57\x3c\x85\x9b\x02\x58\xb0\x54\x33\x99\x59\x06\x16\xc6\xfe\x7f\x78\xfd\x73\xc0\x5d\xa3\x08\x2d\xb8\x36\xb6\x16\x11\x03\xb4\xd4\x20\xdf\x8e\x7a\x7f\x5a\xb4\xdc\xec\xd7\x1a\xa4\x53\xa4\x7b\xbf\x87\x91\xbd\x42\x95\xe6\x2f\x7b\xdd\x0a\xcd\xd5\xd1\xbc\x22\xc8\x51\xfe\x51\x10\x38\xa1\xda\xb6\xa3\x63\x03\x49\xbc\xa2\x3c\x16\xe5\x08\x70\x80\x24\x51\x0e\xba\x1e\x1f\x47\xc3\xa7\x43\x68\x41\x53\x6d\x47\xcf\x98\xc1\x15\x72\x5c\x21\x47\x9f\x68\xb9\xe9\x6f\xec\x78\x9d\x1a\x0a\xf3\x4a\x6c\x46\x8c\xc6\xa7\x45\x25\x50\x69\x6a\xc6\xc0\xfa\x73\x3d\xa4\xdb\xcb\x38\x94\x75\xb5\x5b\xc2\x9d\xed\x0d\x12\x04\x01\x0e\x56\x54\x33\x95\xd5\xcd\xd4\xa8\x39\xd9\x0a\xcc\x49\x7d\xd3\x3b\xce\xdd\x39\x04\x21\x23\x71\x49\x16\x26\x67\x9e\x04\x49\x47\x05\x03\xea\x55\x7b\x9b\x1e\xbc\xa6\xe5\x9f\xbd\x4e\xd7\x2b\x54\xef\x29\x81\x1b\x55\x38\x19\x27\x4b\x0e\x9b\xa4\x76\x70\xab\xf5\x0a\xd5\x5e\xf3\x83\x57\xf8\x4a\xf3\x1f\xc9\xbb\x2a\x5d\xcb\x0d\xf1\x7e\xfd\x92\x7c\x3f\x25\xa5\xf5\x5e\xf7\x0b\x39\xdb\xbf\x6a\x6f\xfb\xb9\x2e\xd9\xd8\xa1\xe7\xeb\x7e\xf9\xd7\xed\x95\x98\x18\x93\x80\x43\xff\x02\x00\x00\xff\xff\x8e\x49\x2b\x78\x28\x03\x00\x00")

func antshellCfgBytes() ([]byte, error) {
	return bindataRead(
		_antshellCfg,
		"antshell.cfg",
	)
}

func antshellCfg() (*asset, error) {
	bytes, err := antshellCfgBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "antshell.cfg", size: 808, mode: os.FileMode(420), modTime: time.Unix(1629860694, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"antshell.cfg": antshellCfg,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"antshell.cfg": &bintree{antshellCfg, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
